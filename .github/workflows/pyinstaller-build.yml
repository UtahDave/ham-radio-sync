# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build executeable

env:
  semver: 1.1.0
  python-version: 3.8

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:
  build-windows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ env.python-version }} on Windows
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}
    - name: Install dependencies on Windows
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    - name: Build windows executable
      run: |
        pyinstaller -F radio_sync.py -n radio_sync-win-${{ env.semver }}.${{ github.run_number }}.exe
        move dist/radio_sync-win-${{ env.semver }}.${{ github.run_number }}.exe ./
        7z a -tzip radio_sync-win-${{ env.semver }}.${{ github.run_number }}.zip radio_sync-win-${{ env.semver }}.${{ github.run_number }}.exe
    - name: Upload windows executable
      id: upload_executable
      uses: actions/upload-artifact@v2
      if: $${{ github.ref == 'refs/heads/ftm400' }}
      with:
        name: radio_sync-win-${{ env.semver }}.${{ github.run_number }}
        path: radio_sync-win-${{ env.semver }}.${{ github.run_number }}.zip
  build-osx:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }} on OSX 11
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install dependencies on OSX
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
      - name: Build OSX executable
        run: |
          pyinstaller -F radio_sync.py -n radio_sync-osx-${{ env.semver }}.${{ github.run_number }}
          mv dist/radio_sync-osx-${{ env.semver }}.${{ github.run_number }} ./
          7z a -tzip radio_sync-osx-${{ env.semver }}.${{ github.run_number }}.zip radio_sync-osx-${{ env.semver }}.${{ github.run_number }}
      - name: Upload OSX executable
        id: upload_executable
        uses: actions/upload-artifact@v2
        if: $${{ github.ref == 'refs/heads/ftm400' }}
        with:
          name: radio_sync-osx-${{ env.semver }}.${{ github.run_number }}
          path: radio_sync-osx-${{ env.semver }}.${{ github.run_number }}.zip
  release:
    #if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [build-windows, build-osx]
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v2
      with:
        name: radio_sync-win-${{ env.semver }}.${{ github.run_number }}
    - name: Download OSX artifact
      uses: actions/download-artifact@v2
      with:
        name: radio_sync-osx-${{ env.semver }}.${{ github.run_number }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.semver }}.${{ github.run_number }}
        release_name: Release ${{ env.semver }}.${{ github.run_number }}
        body: |
          release ${{ github.run_number }} description
          Changelog:
        draft: true
        prerelease: false
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./radio_sync-win-${{ env.semver }}.${{ github.run_number }}.zip
        asset_name: radio_sync-win-v${{ env.semver }}.${{ github.run_number }}.zip
        asset_content_type: application/zip
    - name: Upload OSX Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./radio_sync-osx-${{ env.semver }}.${{ github.run_number }}.zip
        asset_name: radio_sync-osx-v${{ env.semver }}.${{ github.run_number }}.zip
        asset_content_type: application/zip